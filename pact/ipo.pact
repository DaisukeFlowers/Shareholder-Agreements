; =================================================================================================================================================================================== ;
;                                                                       Smart Pacts: Digital Initial Public Offering                                                                  ;
;                                                                                  03 of March of 2024                                                                                ;
;                                                                                     smartpacts.io                                                                                   ;
; =================================================================================================================================================================================== ;
;                                                                                                                                                                                     ;
;                                                                                                                                                                                     ;
; Offering Overview Summary                                                                                                                                                           ;
;                                                                                                                                                                                     ;
; This summary highlights selected information contained elsewhere in this offering. This summary does not contain all the information you should consider before investing           ;
; in the securities of Smart Pacts.                                                                                                                                                   ;
; You should read the entire Contract carefully, including the "Digital Shareholder Agreement" and "White Paper" before making an investment decision.                                ;
;                                                                                                                                                                                     ;
; Company Overview:                                                                                                                                                                   ;
; Smart Pacts (The "Company") aims to revolutionize the accessibility and understanding of smart contracts by offering simplified and user-friendly solutions.                        ;
; Our innovative platform empowers users with the tools they need to create, manage, and understand smart contracts without requiring advanced technical knowledge.                   ;
;                                                                                                                                                                                     ;
; Offering:                                                                                                                                                                           ;
; Smart Pacts is offering shares of its common stock at a price of 10 KDA per share.                                                                                                  ;
;                                                                                                                                                                                     ;
; Objective:                                                                                                                                                                          ;
; The primary objectives of this offering are to raise capital for further development of our platform, expand our market reach, and provide liquidity to our employees.              ;
;                                                                                                                                                                                     ;
; Offering Details:                                                                                                                                                                   ;
; - Price Per Share: 10 KDA                                                                                                                                                           ;
; - Total Shares Offered: 250,000 Shares                                                                                                                                              ;
; - Proceeds: 2,500,000 KDA                                                                                                                                                           ;
;                                                                                                                                                                                     ;
; Use of Proceeds:                                                                                                                                                                    ;
; The net proceeds from this offering will be used for the following purposes:                                                                                                        ;
; - Development of new features and technologies for our platform.                                                                                                                    ;
; - Marketing and sales activities to expand our customer base.                                                                                                                       ;
; - General corporate purposes, including working capital and operational expenses.                                                                                                   ;
;                                                                                                                                                                                     ;
; =================================================================================================================================================================================== ;
;                                                                                                                                                                                     ;
; ======= DEPLOYMENT ========================================================== ; Deployment Section.                                                                                 ;
                                                                                                                                                                                      ;
(namespace "smartpacts")                                                        ; A "namespace" is a unique scope named "smartpacts" where the Module will live in.                   ;
                                                                                ;                                                                                                     ;
                                                                                ; To ensure the ownership of the keysets that govern the Module, we                                   ;
(enforce-guard (keyset-ref-guard "smartpacts.shares-admin-keyset"))             ; Enforce the transaction to be signed by "smartpacts.shares-admin-keyset".                           ;
                                                                                ;                                                                                                     ;
; ====== DIGITAL INITIAL PUBLIC OFFERING  ===================================== ; Digital Shareholder Agreement Section.                                                              ;
                                                                                ;                                                                                                     ;
(module shares-ipo GOVERNANCE                                                   ; The Module declared as "shares-ipo" protected by GOVERNANCE capability.                             ;
    @doc "Smart Contract Shares Initial Public Offering."                       ; Public Documentation "Smart Contract Shares Initial Public Offering.".                              ;
                                                                                ;                                                                                                     ;
; ======= MAIN MODULE CAPABILITIES ============================================ ; Main Module Capabilities Section                                                                    ;
                                                                                ;                                                                                                     ;
(defcap GOVERNANCE ()                                                           ; Defines Capability GOVERNANCE that requires no imputs                                               ;
@doc "Give the admin full access to upgrade the module."                        ; Public Documentation "Give the admin full access to upgrade the module.".                           ;
  (enforce-guard (keyset-ref-guard "smartpacts.shares-admin-keyset"))           ; Requires "smartpacts.shares-admin-keyset" owner's signature for GOVERNANCE transactions.            ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defcap SHARES-MANAGER ()                                                       ; Defines Capability SHARES-MANAGER that requires no imputs                                           ;
@doc "Give the manager access to private functions."                            ; Public Documentation "Give the manager access to private functions.".                               ;
  (enforce-guard (keyset-ref-guard "smartpacts.shares-manager-keyset"))         ; Requires "smartpacts.shares-manager-keyset" owner's signature for SHARES-MANAGER transactions.      ;
)                                                                               ; SHARES-MANAGER is required in all private functions.                                                ;
                                                                                ;                                                                                                     ;
; ======= IMPORTS ============================================================= ;                                                                                                     ;
                                                                                ; The "use" statement allows a Smart Contract to access functions,                                    ;
(use coin)                                                                      ; variables, or data defined in another Module or Namespace.                                          ;
(use smartpacts.shares)                                                         ; Imports all functions, variables and available data defined within the native Coin Smart Contract   ;
                                                                                ; and the Smart Pacts Digital Shareholder Agreement.                                                  ;
; ======= INITIAL PUBLIC OFFER CONSTANTS ====================================== ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defconst IPO_ACCOUNT:string (create-principal                                  ; Creates Shares Principal Account based on                                                           ;
    (create-capability-guard (IPO-OWNERSHIP)))                                  ; IPO-OWNERSHIP Capability as IPO_ACCOUNT                                                             ;
  "Self-managed Principal IPO Account.")                                        ; Public Documentation "Self-managed Principal IPO Account."                                          ;
                                                                                ;                                                                                                     ;
(defconst IPO_SHARES_PRICE_KDA:decimal 10.0                                     ; Defines constant for IPO Shares price at ten (10.0) KDA per Share as "IPO_SHARES_PRICE_KDA"         ;
  "Initial Public Offering Price: 10 KDA per Share.")                           ; Public Documentation "Initial Public Offering Price: 10 KDA per Share.".                            ;
                                                                                ;                                                                                                     ;
; ======= INITIAL PUBLIC OFFER CAPACITIES ===================================== ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defcap IPO-OWNERSHIP:bool ()                                                   ; Defines SHARES-OWNERSHIP Capability and requires no imputs.                                         ;
@doc "Initial Public Offering ownership managed capability."                    ; Public Documentation "Initial Public Offering ownership managed capability.".                       ;
  true                                                                          ; Where the Module is always entitle to this Capability.                                              ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defcap BUY-IPO:bool                                                            ; BUY-IPO Capability requires a                                                                       ;
  ( shares-reciver:string                                                       ; Shares Reciver Account and a                                                                        ;
    shares-amount:decimal)                                                      ; Shares Amount to recive.                                                                            ;
  (enforce (!= shares-reciver "") "valid receiver")                             ; Enforces that Shares Reciver Account is not empy ("") and                                           ;
  (enforce (> shares-amount 0.0) "Positive amount")                             ; enforces that Shares Amount to recive is not zero (0.0).                                            ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defcap EXCHANGE:bool ()                                                        ; The EXCHANGE Capability requires no imputs and has a                                                ;
@doc "Exchange capability For Initial Public Offering."                         ; Public Documentation of "Exchange capability For Initial Public Offering.",                         ;
  true                                                                          ; where the Shareholders are always entitle to this Capability.                                       ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; ======= INITIAL PUBLIC OFFER FUNCTIONS ====================================== ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun exchange                                                                 ; The Exchange function requires the following                                                        ;
  ( coin:module{fungible-v2}                                                    ; The Coin Module using the fungible-v2 interface with the                                            ;
    coin-sender:string                                                          ; Coin Sender Account,                                                                                ;
    coin-receiver:string                                                        ; KDA Reciver Address and                                                                             ;
    coin-amount:decimal                                                         ; KDA Amount to send.                                                                                 ;
    shares:module{fungible-v2}                                                  ; The Shares Module using the fungible-v2 interface with the                                          ;
    shares-sender:string                                                        ; Shares Sender Account,                                                                              ;
    shares-receiver:string                                                      ; Shares Revicer Account and                                                                          ;
    shares-amount:decimal )                                                     ; Shares Amount to revice.                                                                            ;
@doc "Internal Function for Smart Contract to exchange Shares for KDA."         ; Public Documentation "Internal Function for Smart Contract to exchange Shares for KDA.".            ;
  (require-capability (IPO-OWNERSHIP))                                          ; Requires Capability IPO-OWNERSHIP only granted in buy-ipo function.                                 ;
  (enforce (!= coin shares)                                                     ; Enforces that Coin and Shares Modules are different.                                                ;
    "Modules must be different")                                                ; Returns error message if fails.                                                                     ;
  (coin.enforce-unit coin-amount)                                               ; Enfonces that the KDA amount is in complience with enforce-unit function from Coin Contract.        ;
  (smartpacts.shares.enforce-unit shares-amount)                                ; Enfonces that the Shares amount is in complience with enforce-unit function from Shares Contract.   ;
  (enforce (> coin-amount 0.0)                                                  ; Enfonces that the KDA amount is greater than zero (0.0).                                            ;
    "transfer amount must be positive")                                         ; Returns error message if fails.                                                                     ;
  (enforce (> shares-amount 0.0)                                                ; Enfonces that the Shares amount is greater than zero (0.0).                                         ;
    "transfer amount must be positive")                                         ; Returns error message if fails.                                                                     ;
  (with-capability (EXCHANGE)                                                   ; With Capability EXCHANGE granted                                                                    ;
    (coin::transfer coin-sender coin-receiver coin-amount)                      ; Uses the transfer function from the Coin's Contract to transfer the KDA.                            ;
    (shares::transfer shares-sender shares-receiver shares-amount))             ; Uses the transfer function from the Shares' Contract to transer the Shares.                         ;
  (format "{}: From {} To {} amount {} & {}: From {} To {} amount {}"           ; Returns transaction message.                                                                        ;
  [coin coin-sender coin-receiver coin-amount                                   ;                                                                                                     ;
    shares shares-sender shares-receiver shares-amount])                        ;                                                                                                     ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun buy-ipo:string (shares-reciver:string shares-amount:decimal)             ; "buy-ipo" requires the Shares Account to buy Shares and the amount of shares to buy                 ;
@doc "Buy Smart Pact Public Initial Offering Shares for 10 KDA each."           ; Public Documentation "Buy Smart Pact Public Initial Offering Shares for 10 KDA each.".              ;
  (smartpacts.shares.validate-account shares-reciver)                           ; Validate with Shares' Contract function that the Shares Reciver Account is in complience.           ;
  (smartpacts.shares.enforce-unit shares-amount)                                ; Validate with Shares' Contract function that the Shares Account to buy is in complience.            ;
  (with-capability (BUY-IPO shares-reciver shares-amount)                       ; With Capability BUY-IPO for Shares revicer and amount granted,                                      ;
    (let (                                                                      ; let the following be                                                                                ;
        (kda-amount (floor (* shares-amount IPO_SHARES_PRICE_KDA)               ; "kda-amount" as Shares Amount to buy times the IPO Shares Price                                     ;
          coin.MINIMUM_PRECISION))                                              ; round to the coin's contract minimum precision.                                                     ;
        (shares-reciver-kda-account                                             ; "shares-reciver-kda-accoint" as                                                                     ;
          (smartpacts.shares.get-kda-account shares-reciver)))                  ; the KDA Address associated to the Shares Revicer's Account                                          ;
      (coin.enforce-unit kda-amount)                                            ; Enforce the total KDA amount to send is in compliance with the Coin Contract                        ;
      (with-capability (IPO-OWNERSHIP)                                          ; With Capability IPO-OWNERSHIP granted                                                               ;
        (install-capability                                                     ; Instal Capability TRANSFER from Shares Module                                                       ;
          (smartpacts.shares.TRANSFER IPO_ACCOUNT shares-reciver shares-amount)); From IPO Account to Shares Reciver's Account with Shares Amount to buy.                             ;
        (install-capability                                                     ; Instal Capability TRANSFER from Coin Module                                                         ;
          (coin.TRANSFER shares-reciver-kda-account IPO_ACCOUNT kda-amount))    ; From Shares Reciver KDA account to IPO Account with KDA Amount to pay.                              ;
        (exchange coin shares-reciver-kda-account IPO_ACCOUNT kda-amount        ; Execute Exchange funcion with required imputs.                                                      ;
            smartpacts.shares IPO_ACCOUNT shares-reciver shares-amount ))       ;                                                                                                     ;
      (format "{} shares transfered to {} for {} KDA"                           ; Returns transaction message.                                                                        ;
        [shares-amount shares-reciver kda-amount])))                            ;                                                                                                     ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; ======= GENESIS INITIAL PUBLIC OFFER FUNCTIONS ============================== ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun initialize:string ()                                                     ; "initialize" requires no imputs                                                                     ;
@doc "Initialize Smart Pacts Initial Public Offering."                          ; Public Documentation "Initialize Smart Pacts Initial Public Offering.".                             ;
  (with-capability (GOVERNANCE)                                                 ; With Capability GOVERNANCE granted                                                                  ;
    (coin.create-account IPO_ACCOUNT (create-capability-guard (IPO-OWNERSHIP))) ; Create IPO KDA Account using Coin Module                                                            ;
    (smartpacts.shares.create-allocation IPO_ACCOUNT (smartpacts.shares.now)    ; Create a Shares allocation for IPO Shares Account with a time release of now                        ;
      (create-capability-guard (IPO-OWNERSHIP))                                 ; with a Capability Guard                                                                             ;
        smartpacts.shares.SHARES_IPO_GENESIS_SUPPLY)                            ; for the Shares IPO Genesis Supply and                                                               ;
    (smartpacts.shares.release-allocation IPO_ACCOUNT))                         ; Release the Acollation to the IPO Shares Account.                                                   ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun get-funds (account:string)                                               ; "get-funds" require a Share account                                                                 ;
@doc "Transfers funds from IPO account to input account."                       ; Public Documentation "Transfers funds from IPO account to input account."                           ;
  (with-capability (SHARES-MANAGER)                                             ; With Capability SHARES-MANAGER and                                                                  ;
    (with-capability (IPO-OWNERSHIP)                                            ; With Capability IPO-OWNERSHIP granted                                                               ;
      (install-capability                                                       ; install Capability TRANSFER                                                                         ;
        (coin.TRANSFER IPO_ACCOUNT account (coin.get-balance IPO_ACCOUNT)))     ; from IPO Account to provided account with the total IPO balance and                                 ;
      (coin.transfer IPO_ACCOUNT account (coin.get-balance IPO_ACCOUNT))))      ; execute transfer.                                                                                   ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
)                                                                               ;                                                                                                     ;
; =================================================================================================================================================================================== ;