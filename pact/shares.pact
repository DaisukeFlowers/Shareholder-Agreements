; =================================================================================================================================================================================== ;
;                                                                    Smart Pacts: Digital Shareholder Agreement                                                                       ;
;                                                                              24 of February of 2024                                                                                 ;
;                                                                                  smartpacts.io                                                                                      ;
; =================================================================================================================================================================================== ;
;                                                                                                                                                                                     ;
;                                                                                                                                                                                     ;
; Preamble: Introduction and Definitions                                                                                                                                              ;
;                                                                                                                                                                                     ;
; This document serves as the foundational Shareholders' Agreement (hereafter referred to as the "Module" or "Smart Contract"),                                                       ;
; executed from the Deployment Date between "Smart Pacts" (the "Company") and individuals and entities (individually a "Shareholder" and collectively, the "Shareholders").           ;
; Designed to facilitate transparent and secure digital transactions, this smart contract is governed by the principles of clarity, security, and efficiency,                         ;
; reflecting our commitment to innovation and shareholder empowerment.                                                                                                                ;
;                                                                                                                                                                                     ;
; Definitions and Key Concepts                                                                                                                                                        ;
; - Account: The unique digital identifier for Shareholders within the contract, facilitating transactions and holdings management.                                                   ;
; - KDA Address: The blockchain address associated with a shareholder's account for receiving dividends and conducting transactions.                                                  ;
; - Transaction Parties: The "Sender" who initiates share transfers and the "Receiver" who accepts them, with the "Amount" specifying the shares transferred.                         ;
; - Guard: Security measures and conditions that must be met to execute contract actions, protecting against unauthorized access and actions.                                         ;
; - Principal Account: Signified by a "k:" prefix, denotes a high-level account with governance rights across all chains, secured by robust guards.                                   ;
; - Dividend: A payment made to shareholders, calculated as the time-weighted average × Dividend Per Share, issued upon transaction or executing the release transaction function.    ;
; - Time-Weighted Average: Calculated at each transaction to determine dividend amounts, ensuring fair and equitable distribution based on shareholding duration.                     ;
; - Accounts Management: Outlines the structure for creating and managing Shareholder accounts, including schemas, tables, and functions for account operations.                      ;
; - Crosschain Integration: Facilitates secure and efficient interactions across different blockchain networks, expanding the contract's reach and utility.                           ;
; - Management and Administration: Details the procedures for initial setup (Genesis), dividend distributions,                                                                        ;
; and share allocations, ensuring comprehensive governance and financial management.                                                                                                  ;
;                                                                                                                                                                                     ;
; Technical Structure Overview                                                                                                                                                        ;
; - Namespace Declaration (namespace "smartpacts"): Establishes the contract’s unique domain within the Kadena blockchain, ensuring distinct identity and scope.                      ;
; - Module Definition: Defines the core functionalities and governance of the smart contract, setting the stage for detailed operations and interactions.                             ;
; - Public Documentation (@doc): Describes the purpose and functionality of the smart contract components, brodcast into the blockchain, ensuring transparency and accessibility.     ;
; - Formal Verification Models (@model): Utilizes Microsoft Z3 Formal Verification to safeguard the contract’s operations, guaranteeing reliability and security.                     ;
; - Interfaces (The "Amendments" and applied by "implements"): Specifies the contract's adherence to predefined protocols for formal verification,                                    ;
; constant definitions, and typed function signatures.                                                                                                                                ;
; - Capability (defined as "defcap"): Special permissions within the smart contract that regulate access and actions, ensuring operational integrity.                                 ;
; - Functions (defined as "defun"): Represents the specific procedures or operations defined within the smart contract, allowing for the execution of predefined tasks.               ;
;                                                                                                                                                                                     ;
; Shareholder Rights                                                                                                                                                                  ;
; - Holding and Transferring Shares: Shareholders are entitled to hold and transfer shares freely within the ecosystem.                                                               ;
; - Voting on Proposals: Empowered to vote on proposals, influencing corporate governance and strategic decisions.                                                                    ;
; - Receiving Dividends: Eligible for dividends, with the time-weighted average formula determining equitable distribution.                                                           ;
; - Account Management Functions: Including creating accounts, transferring shares, accessing balances and proposal details, voting, and modifying account-related security settings. ;
;                                                                                                                                                                                     ;
; Company Rights                                                                                                                                                                      ;
; - Proposal Addition: Ability to introduce proposals for voting by the shareholders.                                                                                                 ;
; - Dividend Setting: Authority to determine the dividend per share and release schedule.                                                                                             ;
; - Share Allocation: Power to set share allocations for future releases, including funders' shares and Initial Public Offering.                                                      ;
; - Contract Initialization: Responsibility for the initial setup and activation of the smart contract.                                                                               ;
; - Update the contract: The Company reserves the right to update the contract to adapt to evolving legal, technical, or business requirements,                                       ;
; ensuring the smart contract remains effective, secure, and aligned with stakeholders' interests."                                                                                   ;
;                                                                                                                                                                                     ;
; Initial Genesis Share Supply                                                                                                                                                        ;
; Outlined as 1 million shares (1,000,000), distributed as follows:                                                                                                                   ;
; - 250,000 to the Initial Public Offering (IPO)                                                                                                                                      ;
; - 250,000 to Funders                                                                                                                                                                ;
; - 500,000 as Treasury Supply                                                                                                                                                        ;
;                                                                                                                                                                                     ;
; =================================================================================================================================================================================== ;
;                                                                                                                                                                                     ;
; ======= DEPLOYMENT ========================================================== ; Deployment Section.                                                                                 ;
                                                                                                                                                                                      ;
(namespace "smartpacts")                                                        ; A "namespace" is a unique scope named "smartpacts" where the Module will live in.                   ;
                                                                                ;                                                                                                     ;
                                                                                ; To ensure the ownership of the keysets that govern the Module, we                                   ;
(enforce-guard (keyset-ref-guard "smartpacts.shares-admin-keyset"))             ; Enforce the transaction to be signed by "smartpacts.shares-admin-keyset".                           ;
                                                                                                                                                                                      ;
; ====== DIGITAL SHAREHOLDER AGREEMENT ======================================== ; Digital Shareholder Agreement Section.                                                              ;
                                                                                ;                                                                                                     ;
(module shares GOVERNANCE                                                       ; The Module declared as "shares" protected by GOVERNANCE capability.                                 ;
@doc "Smart Pacts Shares Smart Contract."                                       ; Public Documentation "Smart Pacts Shares Smart Contract.".                                          ;
@model                                                                          ; The formal verification that protects the output of the Module, are declared as following:          ;
    [ (defproperty conserves-mass (balance:decimal)                             ; "conserves-mass" ensures the total balance within the ledger remains constant after transactions.   ;
        (= (column-delta ledger "balance") 0.0))                                ; Ensures balance changes in "ledger" sum to zero (0.0) for conservation                              ;
      (defproperty valid-account (account:string)                               ; "valid-account" validates the Shares account name (the "Account") is in compliance based on         ;
        (and                                                                    ; two specific conditions.                                                                            ;
          (>= (length account) 3)                                               ; The Account must be at least 3 characters long to be valid.                                         ;
          (<= (length account) 256)))                                           ; The Account must not exceed 256 characters to be valid.                                             ;
      (defproperty admin-auth-required                                          ; "admin-auth-required" Requires administrative actions to be                                         ;
        (authorized-by "smartpacts.shares-admin-keyset"))                       ; authorized by key holders of "smartpacts.shares-admin-keyset" keyset.                               ;
      (defproperty manager-auth-required                                        ; "manager-auth-required" Requires management actions to be                                           ;
        (authorized-by "smartpacts.shares-manager-keyset"))                     ; authorized by key holders of "smartpacts.shares-manager-keyset" keyset.                             ;
    ]                                                                           ;                                                                                                     ;
                                                                                ; An Interface is a set of rules implemented in the Module                                            ;
; ======= INTERFACES ========================================================== ; Kadena's native Coin interfaces for assets transaction between chains on Chainweb                   ;
                                                                                ; (each a "Chain" and collectively, the "Chains"), Kadena's multichain blockchain.                    ;
                                                                                ; For details on implemented interfece visit https://github.com/KDA-io/KIPs                           ;
(implements fungible-v2)                                                        ; Adds "fungible-v2" interface for share exchanges in the same Chain.                                 ;
(implements fungible-xchain-v1)                                                 ; Adds "fungible-xchain-v1" for share exchanges across different Chains.                              ;
                                                                                ;                                                                                                     ;
; ======= MAIN MODULE CAPABILITIES ============================================ ; Main Module Capabilities Section                                                                    ;
                                                                                ;                                                                                                     ;
(defcap GOVERNANCE ()                                                           ; Defines Capability GOVERNANCE that requires no imputs                                               ;
@doc "Give the admin full access to upgrade the module."                        ; Public Documentation "Give the admin full access to upgrade the module.".                           ;
  (enforce-guard (keyset-ref-guard "smartpacts.shares-admin-keyset"))           ; Requires "smartpacts.shares-admin-keyset" owner's signature for GOVERNANCE transactions.            ;
)                                                                               ; GOVERNANCE is only required to deploy and upgrade the Module.                                       ;
                                                                                ;                                                                                                     ;
(defcap SHARES-MANAGER ()                                                       ; Defines Capability SHARES-MANAGER that requires no imputs                                           ;
@doc "Give the manager access to private functions."                            ; Public Documentation "Give the manager access to private functions.".                               ;
  (enforce-guard (keyset-ref-guard "smartpacts.shares-manager-keyset"))         ; Requires "smartpacts.shares-manager-keyset" owner's signature for SHARES-MANAGER transactions.      ;
)                                                                               ; SHARES-MANAGER is required in all private functions.                                                ;
                                                                                ;                                                                                                     ;
; ======= IMPORTS ============================================================= ;                                                                                                     ;
                                                                                ; The "use" statement allows a Smart Contract to access functions,                                    ;
                                                                                ; variables, or data defined in another Module or Namespace.                                          ;
(use coin)                                                                      ; Imports all functions, variables and available data defined within the native Coin Smart Contract.  ;
                                                                                ;                                                                                                     ;
; ======= ACCOUNTS ============================================================ ; Accounts secction defines the details of a Shares account                                           ;
                                                                                ;                                                                                                     ;
; =========== ACCOUNT CONSTANTS =============================================== ; Account Constants                                                                                   ;
                                                                                ;                                                                                                     ;
(defconst SHARES_CHARSET CHARSET_LATIN1                                         ; Restricts account names to 'CHARSET_LATIN1' (ISO-8859-1) characters.                                ;
  "The default coin contract character set")                                    ; Public Documentation "The default coin contract character set"                                      ;
(defconst MINIMUM_PRECISION:integer 12                                          ; Sets minimum share precision to 12 decimals                                                         ;
  "Minimum allowed precision for coin transactions")                            ; Public Documentation "Minimum allowed precision for coin transactions"                              ;
(defconst MINIMUM_ACCOUNT_LENGTH:integer 3                                      ; Ensures account names are greart than 3 characters.                                                 ;
  "Minimum account length admissible for coin accounts")                        ; Public Documentation "Minimum account length admissible for coin accounts"                          ;
(defconst MAXIMUM_ACCOUNT_LENGTH:integer 256                                    ; Limits account names to less than 256 characters.                                                   ;
  "Maximum account name length admissible for coin accounts")                   ; Public Documentation "Maximum account name length admissible for coin accounts"                     ;
                                                                                ;                                                                                                     ;
; =========== ACCOUNT SCHEMAS ================================================= ; Details of Shares Accounts                                                                          ;
                                                                                ;                                                                                                     ;
(defschema shares-accounts                                                      ; Defines the structure of Shares Accounts as "shares-accounts" used on the ledger table              ;
@doc "Shares Accounts Schema for ledger table."                                 ; Public Documentation "Shares Accounts Schema for ledger table.".                                    ;
@model [ (invariant (>= balance 0.0)) ]                                         ; Ensures with a formal verification that balance in Shares account is always positive.               ;
  balance:decimal                                                               ; Shares Account will have a balance in decimal.                                                      ;
  kda-account:string                                                            ; Shares Account will have a KDA Address associated where dividends will be transfer.                 ;
  voted-proposal:string                                                         ; Shares Account will have a record of a voted proposal.                                              ;
  share-time:decimal                                                            ; Shares Account will have a record of shares hold over time.                                         ;
  last-timestamp:time                                                           ; Shares Account will have a timestamp record of the last transaction.                                ;
  guard:guard)                                                                  ; Shares Account will be protected by a Guard provided by the owner.                                  ;      
                                                                                ;                                                                                                     ;
; =========== ACCOUNT TABLE =================================================== ; Shares Account table definition                                                                     ;
                                                                                ;                                                                                                     ;
(deftable ledger:{shares-accounts})                                             ; Defines "ledger" table for Shares Account info with "shares-accounts" schema.                       ;
                                                                                ;                                                                                                     ;
; =========== ACCOUNT CAPABILITIES ============================================ ; Shares Account capabilities definitions                                                             ;
                                                                                ;                                                                                                     ;
(defcap TRANSFER:bool ( sender:string receiver:string amount:decimal )          ; TRANSFER capability that requires a Sender, Receiver and Amount.                                    ;
@doc "TRANSFER capability that compose DEBIT and CREDIT."                       ; Public Documentation "Transfer capability that compose DEBIT and CREDIT.".                          ;
@managed amount TRANSFER-mgr                                                    ; Managed by the function TRANSFER-mgr.                                                               ;
  (enforce (!= sender receiver) "same sender and receiver")                     ; Enforces that the Sender and Receiver can not be the same,                                          ;
  (enforce-unit amount)                                                         ; enforces that the Amount of Shares is in compliance with Shares specifications and                  ;
  (enforce (> amount 0.0) "Positive amount")                                    ; enforces that the Amount send is greater than 0.0.                                                  ;
  (compose-capability (DEBIT sender))                                           ; "compose-cabalility" Grants the Capability DEBIT with Sender's Account and                          ;
  (compose-capability (CREDIT receiver))                                        ; grants the Capability CREDIT with Receiver's Account.                                               ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defcap DEBIT (sender:string)                                                   ; DEBIT Capability can only be obtain via TRANSFER Capability and requires Senders Account.           ;
@doc "DEBIT Capability composed by TRANSFER."                                   ; Public Documentation "DEBIT Capability composed by TRANSFER.".                                      ;
  (enforce-guard (at 'guard (read ledger sender)))                              ; Enforces Sender's signature Guard and                                                               ;
  (enforce (!= sender "") "valid sender")                                       ; enforces Sender's Account not to be empty.                                                          ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defcap CREDIT (receiver:string)                                                ; CREDIT Capability can only be obtain via TRANSFER Capability and requires Receiver's account.       ;
@doc "CREDIT Capability composed by TRANSFER."                                  ; Public Documentation "CREDIT Capability composed by TRANSFER.".                                     ;
  (enforce (!= receiver "") "valid receiver")                                   ; Enfoces Receiver's Account not to be empty.                                                         ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defcap ROTATE (account:string)                                                 ; ROTATE Capability to change Shares Account Guard or KDA Address and requires Account name           ;
@doc "Managed Capability to change Guard or KDA Address."                       ; Public Documentation "Managed Capability to change Guard or KDA Address.".                          ;
@managed                                                                        ; Managed Capabilities without parameters can only be executed onces per transaction.                 ;
  true                                                                          ; Where you are always entitle to this Capability.                                                    ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defcap VOTE (account:string)                                                   ; VOTE Capability requires Shares Account.                                                            ;
@doc "VOTE Capability for voting a proposal."                                   ; Public Documentation "VOTE Capability for voting a proposal.".                                      ;
  (enforce-guard (at 'guard (read ledger account)))                             ; Enforces Account's signature Guard and                                                              ;
  (enforce (!= account "") "valid account")                                     ; enforces Account's name is not to be empty.                                                         ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; ============ UTILITY FUNCTIONS ============================================== ; Utility and Evaluation Internal Functions                                                           ;
                                                                                ;                                                                                                     ;
(defun enforce-unit:bool (amount:decimal)                                       ; "enforce-unit" Returns true or false and requires Amount                                            ;
@doc "Internal function to validate Shares precision."                          ; Public Documentation "Internal function to validate Shares precision.".                             ;
  (enforce                                                                      ; Enforces that                                                                                       ;
    (= (floor amount MINIMUM_PRECISION)                                         ; The provited Amount is iqual to the provited Amount round to its minimum precision                  ;
      amount)                                                                   ; Example: Will be true if 0.123456 = 0.123456000000                                                  ;
    (format "Amount violates minimum precision: {}" [amount]))                  ; Returns error message if is false. Example: will be false if 0.12345678901234 = 0.123456789012      ;
)                                                                               ;                                                                                                     ;
                                                                                ; "TRANSFER-mg" ensures the total Amount used in transfer functions in a transaction                  ;
                                                                                ; will not exceed the total Amount signed in the TRANSFER Capability.                                 ;
(defun TRANSFER-mgr:decimal ( managed:decimal requested:decimal)                ; Returns a new balance in decimal and requires a managed Amount and a requested Amount               ;
@doc "Internal function to manage TRANSFER Capability."                         ; Public Documentation "Internal function to manage TRANSFER Capability.".                            ;
  (let ((new-balance (- managed requested)))                                    ; Let "new-balance" be equal to the difference between "managed" Amount and "requested" Amount.       ;
    (enforce (>= new-balance 0.0)                                               ; Enforces that the new balance Amount is greater than zero (0.0) Shares.                             ;
      (format "TRANSFER exceeded for balance {}" [managed]))                    ; Returns error message if false.                                                                     ;
      new-balance)                                                              ; Returns new balance if true.                                                                        ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun validate-account:bool (account:string)                                   ; "validate-account" Returns true or false and requires the Account.                                  ;
@doc "Internal function to validate the Account name is in complience."         ; Public Documentation "Internal function to validate the Account name is in complience.".            ;
  (enforce                                                                      ; Enforces the following                                                                              ;
    (is-charset SHARES_CHARSET account)                                         ; The Account conforms to the supported characters.                                                   ;
    (format "Account does not conform to the coin contract charset: {}"         ; Returns error message if false.                                                                     ;
      [account]))                                                               ;                                                                                                     ;
  (let ((account-length (length account)))                                      ; Let "account-length" be the length of the Account.                                                  ;
    (enforce                                                                    ; Enforces the following                                                                              ;
      (>= account-length MINIMUM_ACCOUNT_LENGTH)                                ; The "account-length" is equal or greater than the MINIMUM_ACCOUNT_LENGTH.                           ;
      (format "Account name does not conform to the min length requirement: {}" ; Returns error message if false.                                                                     ;
        [account]))                                                             ;                                                                                                     ;
    (enforce                                                                    ; Enforces the following                                                                              ;
      (<= account-length MAXIMUM_ACCOUNT_LENGTH)                                ; The "account-length" is equal or less than the MAXIMUM_ACCOUNT_LENGTH.                              ;
      (format "Account name does not conform to the max length requirement: {}" ; Returns error message if false.                                                                     ;
        [account])))                                                            ;                                                                                                     ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun check-reserved:string (account:string)                                   ; "check-reserved" Returns the Account prefix string, if any                                          ;
@doc "Internal function that returns Account name prefix."                      ; Public Documentation "Internal function that returns Account name prefix.".                         ;
  (let ((prefix (take 2 account)))                                              ; Let "prefix" be the first 2 characters of Account                                                   ;
    (if (= ":" (take -1 prefix)) (take 1 prefix) ""))                           ; Evaluates if the second character of the "prefix" is ":" and returns the first character if true.   ;
)                                                                               ; Returns empty ("") if false.                                                                        ;
                                                                                ;                                                                                                     ;
(defun enforce-reserved:bool (account:string guard:guard)                       ; "enforce-reserved" Returns true or false and requires the Acount and Guard.                         ;
@doc "Internal function to validate reserved account name protocols."           ; Public Documentation "Internal function to validate reserved account name protocols.".              ;
  (if (validate-principal guard account)                                        ; Evaluates if the principal Account of the Guard is the same as the provided Account.                ;
  true                                                                          ; Returns true if they are the same.                                                                  ;
  (let ((reserved (check-reserved account)))                                    ; If false, let "reserved" be the result of "check-reserved" function of the Account.                 ;
    (if (= reserved "")                                                         ; If "reserved" is equal to empty ("").                                                               ;
    true                                                                        ; Returns True                                                                                        ;
    (if (= reserved "k")                                                        ; If false, evaluate if "reserved" is equal to "k"                                                    ;
        (enforce false "Single-key account protocol violation")                 ; If true, returns error message.                                                                     ;
        (enforce false                                                          ; If all conditions are false,                                                                        ;
          (format "Reserved protocol guard violation: {}" [reserved]))))))      ; returns error message.                                                                              ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun debit:string (account:string amount:decimal)                             ; "debit" Follows "fungible-v2" interface structure and requires Shares Account and Amount.           ;
@doc "Internal Function to Debit AMOUNT from ACCOUNT balance."                  ; Public Documentation "Internal Function to Debit AMOUNT from ACCOUNT balance.".                     ;
@model [ (property (> amount 0.0))                                              ; Ensures with a formal verification that the Amount debit is greater than zero (0.0).                ;
         (property (valid-account account)) ]                                   ; Ensures with a formal verification that the Account is in compliance.                               ;
  (validate-account account)                                                    ; Ensures with "validate-account" functon that Account is in compliance.                              ;
  (enforce (> amount 0.0) "debit amount must be positive")                      ; Enfoces that Amount debit is greater than zero (0.0). Returns error message if false.               ;
  (enforce-unit amount)                                                         ; Ensures with "enforce-unit" functon that Amount is in compliance.                                   ;
  (require-capability (DEBIT account))                                          ; Requires Capability DEBIT with Account. Only granted in Transfer function via TRANSFER Capability.  ;
  (with-read ledger account                                                     ; Reads from Ledger table Account details where                                                       ;
    { "balance" := balance                                                      ; "balance" is the Account balance,                                                                   ;
    , "share-time" := share-time                                                ; "share-time" is the Account current Share Time Product and                                          ;
    , "last-timestamp" := last-timestamp }                                      ; "last-timestamp" is the timestamp of previous transaction.                                          ;
    (enforce (<= amount balance) "Insufficient funds")                          ; Enforces that Ammount debit is equal or greater than "balance". Returns error message if false.     ;
    (let* (                                                                     ; Let the following be                                                                                ;
        (new-balance (- balance amount))                                        ; "new-balance" as the difference between current balance and the amount Debit,                       ;
        (timestamp-year (get-year last-timestamp))                              ; "timestamp-year" as the year of previous transaction,                                               ;
        (previous-year (- (get-year (now)) 1))                                  ; "previous-year" as previous year from now,                                                          ;
        (diff-timestamp (diff-time (now) last-timestamp))                       ; "diff-timestamp" as the difference on seconds between now and the previous transaction time and     ;
        (new-share-time (+ share-time (* balance diff-timestamp))))             ; "new-share-time" as the new Share Time Product.                                                     ;
      (if (= timestamp-year previous-year) (release-dividend account) true)     ; If previous transaction's year and previous year are the same, then release dividends.              ;
      (update ledger account                                                    ; Updates from Ledger table Account details with                                                      ;
        { "balance" : new-balance                                               ; "balance" as the new balance,                                                                       ;
        , "share-time" : new-share-time                                         ; "share-time" as the new Share Time Product and                                                      ;
        , "last-timestamp" : (now) })))                                         ; "last-timestamp" as current block time.                                                             ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun credit:string ( account:string                                           ; "credit" Follows "fungible-v2" interface structure, returns a message, updates balance              ;
                       kda-account:string                                       ; and requires receiver's Account, KDA Address,                                                       ;
                       guard:guard                                              ; Guard                                                                                               ;
                       amount:decimal )                                         ; and Amount                                                                                          ;
@doc "Internal Function to Credit AMOUNT to ACCOUNT balance"                    ; Public Documentation "Internal Function to Credit AMOUNT to ACCOUNT balance"                        ;
@model [ (property (> amount 0.0))                                              ; Ensures with a formal verification that the Amount credit is greater than zero (0.0).               ;
         (property (valid-account account)) ]                                   ; Ensures with a formal verification that the Account is in compliance.                               ;
  (validate-account account)                                                    ; Ensures with "validate-account" functon that Account is in compliance.                              ;
  (enforce (> amount 0.0) "credit amount must be positive")                     ; Enfoces that Amount credit is greater than zero (0.0). Returns error message if false.              ;
  (enforce-unit amount)                                                         ; Ensures with "enforce-unit" functon that Amount is in compliance.                                   ;
  (require-capability (CREDIT account))                                         ; Requires Capability CREDIT with Account. Only granted in Transfer function via TRANSFER Capability. ;
  (with-default-read ledger account                                             ; Reads from Ledger table Account details or uses default values is Account is not found.             ;
    { "balance" : -1.0                                                          ; Default Balance as -1.0                                                                             ;
    , "guard" : guard                                                           ; Default guard as provided Guard                                                                     ;
    , "kda-account" : kda-account                                               ; Default KDA Address as provided KDA Address                                                         ;
    , "voted-proposal" : ""                                                     ; Default Voted Proposal is empty                                                                     ;
    , "share-time" : 0.0                                                        ; Default "share-time" is zero (0.0)                                                                  ;
    , "last-timestamp" : (now) }                                                ; Default "last-timestamp" with current block time                                                    ;
    { "balance" := balance                                                      ; Reads Balance as "balance"                                                                          ;
    , "guard" := current-guard                                                  ; Reads Guard as "current-guard"                                                                      ;
    , "kda-account" := current-kda-account                                      ; Reads KDA Address as "current-kda-account"                                                          ;
    , "voted-proposal" := current-voted-proposal                                ; Reads voted-proposal as "current-voted-proposal"                                                    ;
    , "share-time" := current-share-time                                        ; Reads current Share Time Product as "current-share-time"                                            ;
    , "last-timestamp" := current-last-timestamp }                              ; Reads previous transaction time as "current-last-timestamp"                                         ;
    (enforce (= current-guard guard) "account guards do not match")             ; Enfonces that current Guard is equal to provided Guard. Returns error message if false              ;
    (let* (                                                                     ; Let the following be                                                                                ;
        (diff-timestamp (diff-time (now) current-last-timestamp))               ; "diff-timestamp" as the difference on seconds between now and the previous transaction time,        ;
        (new-share-time (+ current-share-time (* balance diff-timestamp)))      ; "new-share-time" as the new Share Time Product,                                                     ;
        (timestamp-year (get-year current-last-timestamp))                      ; "timestamp-year" as the year of previous transaction,                                               ;
        (previous-year (- (get-year (now)) 1))                                  ; "previous-year" as previous year from now and                                                       ;
        (is-new                                                                 ; "is-new" as true or false,                                                                          ;
          (if (= balance -1.0)                                                  ; if balance equals to default value (-1.0), meaning is a new Account,                                ;
              (enforce-reserved account guard)                                  ; enfonce that new Account is in compliance with internal function "enforce-reserved". Returns true.  ;
            false)))                                                            ; Returns false if not.                                                                               ;
      (if (= timestamp-year previous-year) (release-dividend account) true)     ; If previous transaction's year and previous year are the same, then release dividends.              ;
      (write ledger account                                                     ; Write in Ledger table in Account the following:                                                     ;
        { "balance" : (if is-new amount (+ balance amount))                     ; If is a new Account, write Amount, if not, sum the Amount to current balance.                       ;
        , "kda-account" : (if is-new kda-account current-kda-account)           ; If is a new Account, write provided KDA Address, if not, keep current KDA Address.                  ;
        , "voted-proposal" : (if is-new "" current-voted-proposal)              ; If is a new Account, write an empty Voted Proposal, if not, keep current Voted Proposal.            ;
        , "share-time" : (if is-new 0.0 new-share-time)                         ; If is a new Account, write Share Time Product as zero (0.0), if not, keep current value.            ;
        , "last-timestamp" : (now)                                              ; Always writes current block time.                                                                   ;
        , "guard"   : current-guard })))                                        ; Always writes current Guard.                                                                        ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun get-year:integer (timestamp:time)                                        ; "get-year" Returns the year of a given time.                                                        ;
@doc "Returns year of givrn time."                                              ; Public Documentation "Returns year of given time.".                                                 ;
  (str-to-int (take 4 (drop 1 (format "{}" [timestamp]))))                      ; Transforms time into string, removes the first quote and takes the first 4 characters and           ;
)                                                                               ; transforms string to integer.                                                                       ;
                                                                                ;                                                                                                     ;
(defun now:time ()                                                              ; "now" returns current block time and requires no imputs.                                            ; 
@doc "Returns current block time."                                              ; Public Documentation "Returns current block time.".                                                 ;
  (at "block-time" (chain-data))                                                ; Gets block time form chain data.                                                                    ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun get-year-start:time (timestamp:time)                                     ; "get-year-start" returns the start of the year of the give time                                     ;
@doc "Returns first of January of given time."                                  ; Public Documentation "Returns first of January of given time.".                                     ;
  (time                                                                         ; Returns time as                                                                                     ;
    (format "{}-01-01T00:00:00Z" [(get-year timestamp)]))                       ; the year of given time with default day and month as first of January.                              ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; =========== ACCOUNT FUNCTIONS =============================================== ; Share Account Functions Available to Shareholders                                                   ;
                                                                                ;                                                                                                     ;
(defun create-shares-account:string (kda-account:string guard:guard)            ; "create-account" Creates a Principal Account, returns a message and requires KDA Address and Guard  ;
@doc "Creates Principal Shares Account with associated KDA Address."            ; Public Documentation "Creates Principal Shares Account with associated KDA Address.".               ;
@model [ (property conserves-mass) ]                                            ; Ensures with a formal verification that the output conserves the original total of Shares.          ;
  (coin.validate-account kda-account)                                           ; Ensures the KDA Address is in compliance with native Coin "enforce-reserved" policies.              ;
  (let ((account (create-principal guard)))                                     ; Let "account" be the Princial Account of the provided Guard.                                        ;
    (create-account account guard)                                              ; Creates Shares Account with Principal Account and Guard using "create-account" function.            ;
    (update ledger account { "kda-account" : kda-account })                     ; Updates the Account with the provided KDA Address.                                                  ;
    (format "Account created: {}" [account]))                                   ; Returns message "Account created: Account"                                                          ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun create-account:string (account:string guard:guard)                       ; "create-account" Follows "fungible-v2" interface structure and requires Account and Guard           ;
@doc "Creates Non-Principal Shares Account without associated KDA Address."     ; Public Documentation "Creates Non-Principal Shares Account without associated KDA Address.".        ;
@model [ (property conserves-mass)                                              ; Ensures with a formal verification that the conserves the original total of Shares.                 ;
         (property (valid-account account)) ]                                   ; Ensures with a formal verification that the Account is in compliance.                               ;
  (validate-account account)                                                    ; Ensures the Account is in compliance with internal function "validate-account".                     ;
  (enforce-reserved account guard)                                              ; Ensures the Account is in compliance with internal function "enforce-reserved".                     ;
  (insert ledger account                                                        ; Insert to the "ledger" table the Account with the following and will fail if Account already exists.;
    { "balance" : 0.0                                                           ; Balance of the Account with zero (0.0).                                                             ;
    , "kda-account" : ""                                                        ; KDA Address with empty ("").                                                                        ;
    , "guard" : guard                                                           ; Protected with the provided Guard.                                                                  ;
    , "voted-proposal" : ""                                                     ; Voted Proposal with empty ("").                                                                     ;
    , "share-time" : 0.0                                                        ; Share Time Product as zero (0.0).                                                                   ;
    , "last-timestamp" : (now) })                                               ; Transaction time with current block time.                                                           ;
  (format "Account created: {}" [account])                                      ; Returns message "Account created: Account".                                                         ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun transfer:string (sender:string receiver:string amount:decimal)           ; "transfer" Follows "fungible-v2" interface structure, requires Sender, Receiver and Amount          ;
@doc "Transfers Shares from Sender to Receiver."                                ; Public Documentation "Transfers Shares from Sender to Receiver.".                                   ;
@model [ (property conserves-mass)                                              ; Ensures with a formal verification that the output conserves the original total of Shares.          ;
         (property (> amount 0.0))                                              ; Ensures with a formal verification that the Amount transfered is greater than zero (0.0).           ;
         (property (valid-account sender))                                      ; Ensures with a formal verification that the Sender's Account is in compliance.                      ;
         (property (valid-account receiver))                                    ; Ensures with a formal verification that the Receiver's Account is in compliance.                    ;
         (property (!= sender receiver)) ]                                      ; Ensures with a formal verification that the Sender and Receiver can not be the same.                ;
  (enforce (!= sender receiver) "sender cannot be the receiver of a transfer")  ; Enfornces that the Sender and Receiver can not be the same. Returns error message if false.         ;
  (validate-account sender)                                                     ; Ensures with "validate-account" functon that the Sender's Account is in compliance.                 ;
  (validate-account receiver)                                                   ; Ensures with "validate-account" functon that the Receiver's Account is in compliance.               ;
  (enforce (> amount 0.0) "transfer amount must be positive")                   ; Enforces that the Amount transfer is greater than zero (0.0).                                       ;
  (enforce-unit amount)                                                         ; Ensures with "enforce-unit" functon that Amount is in compliance.                                   ;
  (with-capability (TRANSFER sender receiver amount)                            ; With Capability TRANSFER, that grants CREDIT and DEBIT Capabilities,                                ;
    (debit sender amount)                                                       ; Debit to Sender the provided Amount with "debit" function.                                          ;
    (with-read ledger receiver                                                  ; Reads from Ledger table Receiver's Account details                                                  ;
      { "guard" := guard                                                        ; Guard as "guard" and                                                                                ;
      , "kda-account" := kda-account }                                          ; KDA Address as "kda-account", to                                                                    ;
      (credit receiver kda-account guard amount)))                              ; Credits Receiver the provided Amount with "credit" function.                                        ;
  (format "Transfered form {} to {} {} Shares" [sender receiver amount])        ; Returns transaction details.                                                                        ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun transfer-create:string ( sender:string                                   ; "transfer-create" Follows "fungible-v2" interface structure, requires Sender,                       ;
                                receiver:string                                 ; Receiver,                                                                                           ;
                                receiver-guard:guard                            ; receiver-guard and Amount                                                                           ;
                                amount:decimal )                                ; Public Documentation "Transfer Shares from Sender to Receiver                                       ;
@doc "Transfer Shares from Sender to Receiver \                                                     
\or to a new account with Sender's KDA Address and provided Guard."             ; or to a new account with Sender's KDA Address and provided Guard."                                  ;
@model [ (property conserves-mass) ]                                            ; Ensures with a formal verification that the output conserves the original total of Shares.          ;
  (enforce (!= sender receiver) "sender cannot be the receiver of a transfer")  ; Enfornces that the Sender and Receiver can not be the same. Returns error message if false.         ;
  (validate-account sender)                                                     ; Ensures with "validate-account" functon that the Sender's Account is in compliance.                 ;
  (validate-account receiver)                                                   ; Ensures with "validate-account" functon that the Receiver's Account is in compliance.               ;
  (enforce (> amount 0.0) "transfer amount must be positive")                   ; Enforces that the Amount transfer is greater than zero (0.0).                                       ;
  (enforce-unit amount)                                                         ; Ensures with "enforce-unit" functon that Amount is in compliance.                                   ;
  (with-capability (TRANSFER sender receiver amount)                            ; With Capability TRANSFER, that grants CREDIT and DEBIT Capabilities,                                ;
    (debit sender amount)                                                       ; Debit to Sender the provided Amount with "debit" function.                                          ;
    (with-read ledger sender                                                    ; Reads from Ledger table Receiver's Account details                                                  ;
      {"kda-account" := kda-account }                                           ; KDA Address as "kda-account" to                                                                     ;
      (credit receiver kda-account receiver-guard amount)))                     ; Credits Receiver the provided Amount, KDA Address and Guard with "credit" function.                 ;
  (format "Transfered form {} to {} {} Shares" [sender receiver amount])        ; Returns transaction details.                                                                        ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun get-balance:decimal (account:string)                                     ; "get-balance" Follows "fungible-v2" interface structure and requires a Shares Account               ;
@doc "Returns balance of Shares Account."                                       ; Public Documentation "Returns balance of Shares Account.".                                          ;
  (with-read ledger account                                                     ; Reads from the Ledger table the Shares Account and                                                  ;
    { "balance" := balance }                                                    ; gets the balance.                                                                                   ;
    balance )                                                                   ; Returns balance.                                                                                    ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun get-active-proposals:[object] ()                                         ; "get-proposals" requires no imputs. Returns list of active proposals with full detaisl              ;
@doc "Returns list of active proposals."                                        ; Public Documentation "Returns list of active proposals.".                                           ;
  (select proposals                                                             ; Select from Proposals and return details                                                            ;
    (and? (where "effective" (>= (now)))                                        ; where Proposal's effective time must in the past of current time and                                ;
          (where "expiration" (<= (now)))))                                     ; expiration time must be in the future of current time.                                              ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun get-proposal-details:object{proposals-schema} (proposal:string)          ; "get-proposal-detals" requires a proposal entry. Returns Proposal Schema.                           ;
@doc "Returns Proposal details."                                                ; Public Documentation "Returns Proposal details.".                                                   ;
(with-read proposals proposal                                                   ; Reads from Proposals table the Proposal following information:                                      ;
    { "proposal" := proposal                                                    ; Reads Proposal name.                                                                                ;
    , "votes" := votes                                                          ; Reads Proposal votes.                                                                               ;
    , "effective" := effective                                                  ; Reads Efective date.                                                                                ;
    , "expiration" := expiration }                                              ; Reads Expriration date.                                                                             ;
    { "proposal" : proposal                                                     ; Returns Proposal name.                                                                              ;
    , "votes" : votes                                                           ; Returns Proposal votes.                                                                             ;
    , "effective" : effective                                                   ; Returns Efective date.                                                                              ;
    , "expiration" : expiration })                                              ; Returns Expiration date.                                                                            ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun vote:string (account:string proposal:string)                             ; "kda-rotate-account" requires Account and new KDA Address.                                          ;
@doc "Vote for an active Poposal"                                               ; Public Documentation "Update Shares Account's KDA Address.".                                        ;
  (let ((active-proposals (map (at "proposal") (get-active-proposals))))        ; let "active-proposal" be a list of proposal names from the active proposals details                 ;
    (enforce (contains proposal active-proposals) "Invalid Proposal")           ; Enforce that the proposal to vote is in active proposal list. Returns error message if fails        ;
    (with-capability (VOTE account)                                             ; With Capability VOTE for Account,                                                                   ;
      (with-read proposals proposal                                             ; read from proposals the proposal votes and let be                                                   ;
        { "votes" := votes }                                                    ; current Votes as "votes".                                                                           ;
        (with-read ledger account                                               ; Read from Ledger table the Account details, and let be                                              ;
          { "guard" := guard                                                    ; current Guard as "guard"                                                                            ;
          , "balance" := balance                                                ; current Balance as "balance"                                                                        ;
          , "voted-proposal" := voted-proposal }                                ; current voted proposal as "voted-proposal".                                                         ;
          (enforce-guard guard)                                                 ; Enforces signature of current guard.                                                                ;
          (enforce (not (contains voted-proposal active-proposals))             ; Enforce to not contain a voted proposal in the active proposals list and                            ;
            "Already voted")                                                    ; return error message if the Account already voted and active proposal.                              ;
          (update proposals proposal { "votes" : (+ votes balance) })           ; Update proposals details for the proposal with the sum of current votes the balance of the Account. ;
          (update ledger account { "voted-proposal" : proposal })               ; Updates the Ledger table of the Account with the voted proposal.                                    ;
          (format "You voted for {} with {} votes." [proposal balance])))))     ; Returns transaction message.                                                                        ;
)                                                                               ;                                                                                                     ;
                                                                                ; "details" Follows "fungible-v2" interface structure and                                             ;
(defun details:object{fungible-v2.account-details} ( account:string )           ; Returns Shares Account details without associated KDA Address and requires Shares Account           ;
@doc "Returns details following fungible-v2 structure."                         ; Public Documentation "Returns details following fungible-v2 structure.".                            ;
  (with-read ledger account                                                     ; Reads from Ledger table the Shares Account following information:                                   ;
    { "balance" := balance                                                      ; Reads Shares Balance.                                                                               ;
    , "guard" := guard }                                                        ; Reads Shares Account Guard definition.                                                              ;
    { "account" : account                                                       ; Returns Shares Account.                                                                             ;
    , "balance" : balance                                                       ; Returns Shares Balance.                                                                             ;
    , "guard": guard })                                                         ; Returns Shares Account Guard definition.                                                            ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun shares-details:object{shares-accounts} ( account:string )                ; "shares-details" Returns "shares-accounts" Schema details and requires Shares Account.              ;
@doc "Returns Shares Account details."                                          ; Public Documentation "Returns Shares Account details.".                                             ;
  (with-read ledger account                                                     ; Reads from Ledger table the Shares Account following information:                                   ;
    { "balance" := balance                                                      ; Reads Shares Balance.                                                                               ;
    , "kda-account" := kda-account                                              ; Reads KDA Address.                                                                                  ;
    , "voted-proposal" := voted-proposal                                        ; Reads Voted Proposal.                                                                               ;
    , "share-time" := share-time                                                ; Reads Share Time Product.                                                                           ;
    , "last-timestamp" := last-timestamp                                        ; Reads last transaction time.                                                                        ;
    , "guard" := guard }                                                        ; Reads Shares Account Guard definition.                                                              ;
    { "balance" : balance                                                       ; Returns Shares Account.                                                                             ;
    , "kda-account" : kda-account                                               ; Returns KDA Address.                                                                                ;
    , "voted-proposal" : voted-proposal                                         ; Returns Voted Proposal.                                                                             ;
    , "share-time" : share-time                                                 ; Returns Share Time Product.                                                                         ;
    , "last-timestamp" : last-timestamp                                         ; Returns last transaction time.                                                                      ;
    , "guard": guard })                                                         ; Returns Shares Account Guard definition.                                                            ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun precision:integer ()                                                     ; "precision" Returns the MINIMUM_PRECISION and requires no imputs.                                   ;
@doc "Returns Minimum Shares Precision."                                        ; Public Documentation "Returns Minimum Shares Precision.".                                           ;
  MINIMUM_PRECISION                                                             ; Returns MINIMUM_PRECISION value.                                                                    ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun get-kda-account:string (account:string)                                  ; "get-kda-account" Returns the associated KDA Address and requires Shares Account.                   ;
@doc "Returns associated KDA Address."                                          ; Public Documentation "Returns associated KDA Address.".                                             ;
  (at "kda-account" (read ledger account))                                      ; Reads and returns KDA Address from Ledger table for Shares Account.                                 ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun rotate:string (account:string new-guard:guard)                           ; "rotate" Follows "fungible-v2" interface structure, requires Account and new Guard.                 ;
@doc "Update Shares Account's Guard."                                           ; Public Documentation "Update Shares Account's Guard.".                                              ;
  (with-capability (ROTATE account)                                             ; With Capability ROTATE for Account,                                                                 ;
    (with-read ledger account                                                   ; reads from Ledger table the Account details                                                         ;
      { "guard" := old-guard }                                                  ; Current Guard as "old-guard" and                                                                    ;
      (enforce-guard old-guard)                                                 ; enforces signature of current guard, if valid,                                                      ;
      (update ledger account { "guard" : new-guard })))                         ; updates the Ledger table with new Guard.                                                            ;
  "Your Guard has been successfully updated."                                   ; Returns transaction message.                                                                        ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun kda-rotate-account:string (account:string new-kda:string)                ; "kda-rotate-account" requires Account and new KDA Address.                                          ;
@doc "Update Shares Account's KDA Address."                                     ; Public Documentation "Update Shares Account's KDA Address."                                         ;
  (with-capability (ROTATE account)                                             ; With Capability ROTATE for Account,                                                                 ;
    (with-read ledger account                                                   ; reads from Ledger table the Account details                                                         ;
      { "guard" := guard }                                                      ; Current Guard as "guard" and                                                                        ;
      (enforce-guard guard)                                                     ; enforces signature of current guard, if valid,                                                      ;
      (update ledger account { "kda-account" : new-kda })))                     ; updates the Ledger table with new KDA Address.                                                      ;
  "Your KDA Address has been successfully updated."                             ; Returns transaction message.                                                                        ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; =========== CROSSCHAIN SCHEMA =============================================== ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defschema crosschain-schema                                                    ; Defines the structure for cross-chain transfer.                                                     ;
  @doc "Schema for yielded value in cross-chain transfers."                     ; Public Documentation "Schema for yielded value in cross-chain transfers.".                          ;
  receiver:string                                                               ; "receiver" The account receiving the transfer.                                                      ;
  receiver-kda:string                                                           ; "receiver-kda" The receiver's KDA Address.                                                          ;
  receiver-guard:guard                                                          ; "receiver-guard" The guard for the receiver.                                                        ;
  amount:decimal                                                                ; "amount" The decimal amount being transferred.                                                      ;
  voted-proposal:string                                                         ; "voted-proposal" record of a voted proposal.                                                        ;
  share-time:decimal                                                            ; "share-time" record of shares hold over time.                                                       ;
  last-timestamp:time                                                           ; "last-timestamp" record of the last transaction.                                                    ;
  source-chain:string)                                                          ; "source-chain" The originating chain of the transfer.                                               ;
                                                                                ;                                                                                                     ;
; =========== CROSSCHAIN CAPACITIES =========================================== ; Capabilities that Follows "fungible-xchain-v1" interface structure.                                 ;
                                                                                ;                                                                                                     ;
(defcap TRANSFER_XCHAIN:bool ( sender:string                                    ; TRANSFER_XCHAIN capability that requires a "sender" The account Sending the transfer.               ;
                               receiver:string                                  ; "receiver" The account receiving the transfer.                                                      ;
                               amount:decimal                                   ; "amount" The decimal amount being transferred.                                                      ;
                               target-chain:string )                            ; "target-chain" The target chain of the transfer.                                                    ;
@managed amount TRANSFER_XCHAIN-mgr                                             ; Managed by the function TRANSFER_XCHAIN-mgr.                                                        ;
  (enforce-unit amount)                                                         ; Ensures with "enforce-unit" functon that Amount is in compliance.                                   ;
  (enforce (> amount 0.0) "Cross-chain transfers require a positive amount")    ; Enforces that the Amount transfer is greater than zero (0.0).                                       ;
  (compose-capability (DEBIT sender))                                           ; "compose-cabalility" Grants the Capability DEBIT with Sender's Account.                             ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defcap TRANSFER_XCHAIN_RECD:bool ( sender:string                               ; TRANSFER_XCHAIN_RECD capability that requires a "sender" The account Sending the transfer.          ;
                                        receiver:string                         ; "receiver" The account receiving the transfer.                                                      ;
                                        amount:decimal                          ; "amount" The decimal amount being transferred.                                                      ;
                                        source-chain:string )                   ; "source-chain" The originating chain of the transfer.                                               ;
@event true                                                                     ; Marks the receipt as an event, facilitating tracking and                                            ;
)                                                                               ; verification of cross-chain share transfers within the ecosystem.                                   ;
                                                                                ;                                                                                                     ;
; =============== CROSSCHAIN FUNCTIONS ======================================== ; Follows "fungible-xchain-v1" interface structure.                                                   ;
                                                                                ; "TRANSFER_XCHAIN-mgr" ensures the total Amount used in transfer functions in a transaction          ;
                                                                                ; will not exceed the total Amount signed in the TRANSFER_XCHAIN Capability.                          ;
(defun TRANSFER_XCHAIN-mgr:decimal ( managed:decimal requested:decimal )        ; Returns a new balance in decimal and requires a managed Amount and a requested Amount               ;
@doc "Internal function to manage TRANSFER_XCHAIN Capability."                  ; Public Documentation "Internal function to manage TRANSFER_XCHAIN Capability.".                     ;
  (enforce (>= managed requested)                                               ; Enforces that managed Amount is equal or greater than requested Amount.                             ;
    (format "TRANSFER_XCHAIN exceeded for balance {}" [managed]))               ; Returns error message if fails.                                                                     ;
  0.0                                                                           ; Always returns zero (0.0) if succeeds.                                                              ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; =============== CROSSCHAIN PACT ============================================= ; Follows "fungible-xchain-v1" interface structure.                                                   ;
                                                                                ;                                                                                                     ;
(defpact transfer-crosschain:string ( sender:string                             ; Multi-step Pact function "transfer-crosschain" that requires a "sender" Account.                    ;
                                      receiver:string                           ; "receiver" The account receiving the transfer.                                                      ;
                                      receiver-guard:guard                      ; "receiver-guard" The guard for the receiver.                                                        ;
                                      target-chain:string                       ; "target-chain" The target chain of the transfer.                                                    ;
                                      amount:decimal )                          ; "amount" The decimal amount being transferred.                                                      ;
@doc "Transfers Shares from Sender to Receiver cross-chain."                    ; Public Documentation "Transfers Shares from Sender to Receiver cross-chain."                        ;
@model [ (property (> amount 0.0))                                              ; Ensures with a formal verification that the Amount transfered is greater than zero (0.0).           ;
         (property (valid-account sender))                                      ; Ensures with a formal verification that the Sender's Account is in compliance.                      ;
         (property (valid-account receiver)) ]                                  ; Ensures with a formal verification that the Receiver's Account is in compliance.                    ;
  (step                                                                         ; Step 1                                                                                              ;
    (with-capability                                                            ; With Capability                                                                                     ;
      (TRANSFER_XCHAIN sender receiver amount target-chain)                     ; TRANSFER_XCHAIN for sender receiver amount target-chain                                             ;
      (validate-account sender)                                                 ; Ensures with "validate-account" functon that the Sender's Account is in compliance.                 ;
      (validate-account receiver)                                               ; Ensures with "validate-account" functon that the Receiver's Account is in compliance.               ;
      (enforce (!= "" target-chain) "empty target-chain")                       ; Enforces target Chain not to be empty. Returns Error message fails.                                 ;
      (enforce (!= (at 'chain-id (chain-data)) target-chain)                    ; Enforces target Chain not to be current Chain.                                                      ;
        "cannot run cross-chain transfers to the same chain")                   ; Returns error message if fails.                                                                     ;
      (enforce (> amount 0.0) "transfer quantity must be positive")             ; Enforces Amount transfer is greater than zero (0.0).                                                ;
      (enforce-unit amount)                                                     ; Ensures with "enforce-unit" functon that Amount is in compliance.                                   ;
      (enforce (contains target-chain coin.VALID_CHAIN_IDS)                     ; Enforces target Chain to exist in Chainweb from Coin Smart Contract.                                ;
        "target chain is not a valid chainweb chain id")                        ; Returns error message if fails.                                                                     ;
      (debit sender amount)                                                     ; Debit to Sender the provided Amount with "debit" function.                                          ;
      (emit-event (TRANSFER sender "" amount))                                  ; Broadcast TRANSFER event to chainweb blockchain.                                                    ;
      (with-read ledger receiver                                                ; Reads from Ledger table from Receiver's Account the following                                       ;
        { "kda-account" := kda-account                                          ; KDA Address                                                                                         ;
        , "voted-proposal" := voted-proposal                                    ; Voted Proposal                                                                                      ;
        , "share-time" := share-time                                            ; Current Share Time Product                                                                          ;
        , "last-timestamp" := last-timestamp }                                  ; Latest transaction timestamp.                                                                       ;
        (let ((crosschain-details:object{crosschain-schema}                     ; let crosschain-details be an object with crosschain-schema structure with                           ;
            { "receiver" : receiver                                             ; "receiver" The account receiving the transfer.                                                      ;
            , "receiver-kda" : kda-account                                      ; "receiver-kda" The receiver's KDA Address.                                                          ;
            , "receiver-guard" : receiver-guard                                 ; "receiver-guard" The guard for the receiver.                                                        ;
            , "amount" : amount                                                 ; "amount" The decimal amount being transferred.                                                      ;
            , "voted-proposal" : voted-proposal                                 ; "voted-proposal" record of a voted proposal.                                                        ;
            , "share-time" : share-time                                         ; "share-time" record of shares hold over time.                                                       ;
            , "last-timestamp" : last-timestamp                                 ; "last-timestamp" record of the last transaction.                                                    ;
            , "source-chain" : (at 'chain-id (chain-data))}))                   ; "source-chain" The originating chain of the transfer.                                               ;
          (yield crosschain-details target-chain)))))                           ; Holds crosschain-details information until resumed on target Chain                                  ;
  (step                                                                         ; Step 2                                                                                              ;
    (resume                                                                     ; Resumes transaction on targe Chain with information                                                 ;
      { "receiver" := receiver                                                  ; "receiver" The account receiving the transfer.                                                      ;
      , "receiver-kda" := kda-account                                           ; "receiver-kda" The receiver's KDA Address.                                                          ;
      , "receiver-guard" := receiver-guard                                      ; "receiver-guard" The guard for the receiver.                                                        ;
      , "amount" := amount                                                      ; "amount" The decimal amount being transferred.                                                      ;
      , "voted-proposal" := voted-proposal                                      ; Voted Proposal                                                                                      ;
      , "share-time" := share-time                                              ; Current Share Time Product                                                                          ;
      , "last-timestamp" := last-timestamp                                      ; Latest transaction timestamp.                                                                       ;
      , "source-chain" := source-chain }                                        ; "source-chain" The originating chain of the transfer.                                               ;
      (emit-event (TRANSFER "" receiver amount))                                ; Broadcast TRANSFER event to chainweb blockchain.                                                    ;
      (emit-event (TRANSFER_XCHAIN_RECD "" receiver amount source-chain))       ; Broadcast TRANSFER_XCHAIN_RECD event to chainweb blockchain.                                        ;
      (with-capability (CREDIT receiver)                                        ; With Capability CREDIT for Receiver                                                                 ;
        (credit receiver kda-account receiver-guard amount))))                  ; Credits Receiver the provided Amount, KDA Address and Guard with "credit" function.                 ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; ======= MANAGEMENT ========================================================== ; Share Account Functions Available to Management                                                     ;
                                                                                ;                                                                                                     ;
; =========== PROPOSALS SCHEMA ================================================ ; Proposals schema section                                                                            ;
                                                                                ;                                                                                                     ;
(defschema proposals-schema                                                     ; Proposal schema definition                                                                          ;
  @doc "Proposals Schema for proposals ledger table."                           ; Public Documentation "Proposals Schema for proposals ledger table.".                                ;
  @model [ (invariant (>= votes 0.0)) ]                                         ; Ensures with a formal verification that the Votes are greater than zero (0.0).                      ;
    proposal:string                                                             ; "proposal" The Proposal's name                                                                      ;
    votes:decimal                                                               ; "votes" The amount of votes                                                                         ;
    effective:time                                                              ; "effective" The date when the Proposal will be effective for vote.                                  ;
    expiration:time)                                                            ; "expiration" The date when the Proposal will be expire for vote.                                    ;
                                                                                ;                                                                                                     ;
; =========== PROPOSALS TABLE ================================================= ; Proposal table definition                                                                           ;
                                                                                ;                                                                                                     ;
(deftable proposals:{proposals-schema})                                         ; Defines "proposals" table for proposals info with "proposals-accounts" schema.                      ;
                                                                                ;                                                                                                     ;
; =========== PROPOSAL FUNCTIONS ============================================== ; Proposal functions section                                                                          ;
                                                                                ;                                                                                                     ;
(defun add-proposal:string (proposal:string effective:time expiration:time)     ; "add-proposal" requires a proposal name, an effective time and expiration time                      ;
@doc "Add a new proposal."                                                      ; Public Documentation "Add a new proposal.".                                                         ;
@model [ (property (valid-account proposal))                                    ; Ensures with a formal verification that the proposal is in same compliance as Account name.         ;
         (property (manager-auth-required)) ]                                   ; Ensures with a formal verification that the transaction is sigend with manager's keyset.            ;
  (enforce (< effective expiration)                                             ; Enfoce that Effective Date must be before Expiration Date.                                          ;
    "Effective Date must precede Expiration Date.")                             ; Returns error message if false. "Effective Date must precede Expiration Date."                      ;
  (with-capability (SHARES-MANAGER)                                             ; Wtih Capability SHARES-MANAGER                                                                      ;
    (write proposals proposal                                                   ; Write in proposals table the proposal details. Will write a new proposal or update an existing one. ;
      { "proposal" : proposal                                                   ; "proposal" as proposal's name.                                                                      ;
      , "votes" : 0.0                                                           ; "votes" as 0.0 initial votes.                                                                       ;
      , "effective" : effective                                                 ; "effective" as effective date for votation.                                                         ;
      , "expiration" : expiration }))                                           ; "expiration" as expiration data for votation.                                                       ;
  (format "Proposal {} added. Will be effective on {} and expires on {}"        ; Returns transaction message.                                                                        ;
    [proposal effective expiration])                                            ; with "proposal" name "effective" date and "expiration" date values.                                 ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; ========= DIVIDENDS ========================================================= ; Dividends section                                                                                   ;
                                                                                ;                                                                                                     ;
; =========== DIVIDENDS SCHEMA ================================================ ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defschema dividends-schema                                                     ; Allocations schema definition                                                                       ;
  @doc "Dividends registration Schema."                                         ; Public Documentation "Genesis allocations registry.".                                               ;
  dividend-per-share:decimal                                                    ; "balance" as the balance allocated.                                                                 ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; =========== DIVIDENDS SCHEMA ================================================ ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(deftable dividends:{dividends-schema})                                         ; Defines "dividends" table for allocations info with "dividends-schema" schema.                      ;
                                                                                ;                                                                                                     ;
; =========== DIVIDENDS FUNCTIONS ============================================= ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun set-dividend:string (percentage:decimal year:integer)                    ; "set-dividend" requires a percentange and year net income to be distributed.                        ;
@doc "Set the percentage this year's net income to distribute as dividend."     ; Public Documentation "Set the percentage this year's net income to distribute as dividend."         ;
@model [ property (manager-auth-required) ]                                     ; Ensures with a formal verification that the transaction is sigend with manager's keyset.            ;
  (enforce (and (<= 0.0 percentage) (>= 100.0 percentage))                      ; Enforces that percerntage is between 0 and 100 and                                                  ;
    "Percentage requires to be between 0 and 100")                              ; returns error message if fails.                                                                     ;
  (enforce (= 4 (length (int-to-str 10 year))) "Year must be 4 digits")         ; Enforces that the provided year is a 4 digit number and returns error message if fails.             ;
  (with-capability (SHARES-MANAGER)                                             ; With Capability SHARES-MANAGER                                                                      ;
    (let* ((portion (/ percentage 100.0))                                       ; let "portion" be the percentage in portion from 0 to 1.                                             ;
           (dividend-per-share (floor (* portion                                ; Let "dividend-per-share" be the portion of                                                          ;
              (/ (coin.get-balance SHARES_ACCOUNT)                              ; the KDA Amount in the Shares Account devided by                                                     ;
                  SHARES_GENESIS_SUPPLY))                                       ; the Genesis Supply                                                                                  ;
                  coin.MINIMUM_PRECISION)))                                     ; round to the coin's minimum precision.                                                              ;
      (write dividends (int-to-str 10 year)                                     ; write in dividends table for the given year                                                         ;
        { "dividend-per-share" : dividend-per-share})                           ; the dividend per share of that year and                                                             ;
      (format                                                                   ; return                                                                                              ;
        "Dividends set for {}! {}% of net income. Dividend Per Share: {} KDA"   ; transaction message.                                                                                ;
       [year percentage dividend-per-share])))                                  ;                                                                                                     ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun release-dividend:string (account:string)                                 ; "release-dividend" requires an Account.                                                             ;
@doc "Release dividend for an account."                                         ; Public Documentation "Release dividend for an account.".                                            ;
  (with-read ledger account                                                     ; Reads from Ledger table the Account details                                                         ;
    { "balance" := balance                                                      ; The Account's balance as "balance".                                                                 ;
    , "kda-account" := kda-account                                              ; The Account's associated KDA address as "kda-account".                                              ;
    , "share-time" := share-time                                                ; The current Share Time Product as "share-time".                                                     ;
    , "last-timestamp" := last-timestamp }                                      ; The last transaction time as last-timestamp.                                                        ;
    (let* (                                                                     ; Let the following be                                                                                ;
      (timestamp-year (get-year last-timestamp))                                ; "timestamp-year" as the year of last transaction,                                                   ;
      (dividend-year (format "{}" [timestamp-year]))                            ; "dividend-year" as the string of "timestamp-year",                                                  ;
      (previous-year (- (get-year (now)) 1))                                    ; "previous-year" as the current year minus 1,                                                        ;
      (start-previous-year (get-year-start last-timestamp))                     ; "start-previous-year" as January first of last transaction time,                                    ;
      (start-current-year (get-year-start (now)))                               ; "start-current-year" as January first of current year,                                              ;
      (year-time (diff-time start-current-year start-previous-year))            ; "year-time" as the difference between "start-current-year" and "start-previous-year"                ;
      (diff-timestamp (diff-time start-current-year last-timestamp))            ; "diff-timestamp" as the difference between "start-current-year" and "last-timestamp"                ;
      (new-share-time (+ share-time (* balance diff-timestamp)))                ; "new-share-time" as the sum of previous Share Time and current Share Time,                          ;
      (dividend-per-share                                                       ; "dividend-per-share" as the value of                                                                ;
        (at "dividend-per-share" (read dividends dividend-year)))               ; "dividend-per-share" from dividends table for previous year and                                     ;
      (time-weighted-average (/ new-share-time year-time))                      ; "time-weighted-average" as Total Share Time Product devided by previous year time                   ;
      (dividends (floor (* time-weighted-average dividend-per-share)            ; "dividends" as the Time Weighted Average per Divided Per Share                                      ;
        coin.MINIMUM_PRECISION)))                                               ; round to coin's minimum precision.                                                                  ;
    (enforce (= timestamp-year previous-year)                                   ; Enfocere that previous transaction year is equal to previous year,                                  ;
      "Dividends not available until next year")                                ; returns error message if fails.                                                                     ;
    (with-capability (SHARES-OWNERSHIP)                                         ; With Capability SHARES-OWNERSHIP                                                                    ;
      (install-capability                                                       ; install the following capability from the Coin contract                                             ;
        (coin.TRANSFER SHARES_ACCOUNT kda-account dividends) )                  ; TRANSFER from KDA Shares Account to Shareholder's KDA Account with Dividend Amount.                 ;
      (coin.transfer SHARES_ACCOUNT kda-account dividends))                     ; Execute Coin transfer.                                                                              ;
    (update ledger account                                                      ; Updates from Ledger table Account details with                                                      ;
      { "share-time" : 0.0                                                      ; "share-time" with zero (0.0) and                                                                    ;
      , "last-timestamp" : start-current-year })))                              ; "last-timestamp" with January first of current year                                                 ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
;(defun get-pending-dividends:[string] ()                                        ; "get-pending-dividends" requires no imputs. Returns list of accounts pending to release dividends.  ;
;@doc "Returns list of pending dividends accounts."                              ; Public Documentation "Returns list of pending dividends accounts.".                                 ;
;  (select ledger ["account"]                                                    ; Select from Ledger and return accounts - need to add account to ledger                              ;
;    (where year of current last-timestamp is equial to last year))              ; TBD                                                                                                 ;
;)                                                                               ; get pending list and use external script to run release-dividend for each account before year ends  ;
                                                                                ;                                                                                                     ;
; ========= ALLOCATIONS ======================================================= ; Allocations section                                                                                 ;
                                                                                ;                                                                                                     ;
; =========== ALLOCATIONS CAPABILITIES ======================================== ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defcap SHARES-ALLOCATION:bool ()                                               ; Defines Capability SHARES-ALLOCATION and requires no imputs.                                        ;
@doc "Shares allocation managed capability"                                     ; Public Documentation "Give the manager access to private functions.".                               ;
  true                                                                          ; Where you are always entitle to this Capability.                                                    ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; =========== ALLOCATIONS SCHEMA ============================================== ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defschema allocations-schema                                                   ; Allocations schema definition                                                                       ;
  @doc "Genesis allocations registry."                                          ; Public Documentation "Genesis allocations registry.".                                               ;
  balance:decimal                                                               ; "balance" as the balance allocated.                                                                 ;
  date:time                                                                     ; "date" as release date of allocation.                                                               ;
  guard:guard                                                                   ; "guard" as Guard that owns the allocation Account.                                                  ;
  redeemed:bool)                                                                ; "redeemed" as the indicator if allocation as been already released.                                 ;
                                                                                ;                                                                                                     ;
; =========== ALLOCATIONS TABLE =============================================== ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(deftable allocations:{allocations-schema})                                     ; Defines "allocations" table for allocations info with "allocations-schema" schema.                  ;
                                                                                ;                                                                                                     ;
; =========== GENESIS CONSTANTS =============================================== ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defconst ALLOCATIONS_ACCOUNT:string (create-principal                          ; Creates Shares Principal Account based on                                                           ;
    (create-capability-guard (SHARES-ALLOCATION)))                              ; SHARES-ALLOCATION Capability as ALLOCATIONS_ACCOUNT                                                 ;
  "Self-managed Principal Shares Account.")                                     ; Public Documentation "Self-managed Principal Shares Account.".                                      ;
                                                                                ;                                                                                                     ;
; =========== ALLOCATION FUNCTIONS ============================================ ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun get-allocation-balance:decimal ( account:string )                        ; "get-allocation-balance" requires an Account.                                                       ;
@doc "Returs the allocation balance of an Account."                             ; Public Documentation "Returs the allocation balance of an Account.".                                ;
  (with-read allocations account                                                ; Reads from the allocation table the Accounts details.                                               ;
    { "balance" := balance}                                                     ; "balance" as the allocation balance.                                                                ;
        balance )                                                               ; Returns the allocation balance of given Account.                                                    ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun validate-total-allocations:bool ()                                       ; "validate-total-allocations" requires no imputs         .                                           ;
@doc "Validate total allocations balance."                                      ; Public Documentation "Validate total allocations balance.".                                         ;
  (let ((allocations-balance (get-balance ALLOCATIONS_ACCOUNT))                 ; Let "allocations-balance" be the balance in a Allocations Account and                               ;
        (total-allocations-balance                                              ; "total-allocations-balance" be                                                                      ;
         (fold (+) 0.0 (map (get-allocation-balance)                            ; the total sum of allocations balance, with get-allocation-balance function, in                      ;
                            (keys allocations)))))                              ; all the Accounts of the allocation table.                                                           ;
    (enforce (<= total-allocations-balance allocations-balance)                 ; Enforece that the total allocation balance is less than the balance in Allocations Account.         ;
      (format "Total allocation balance cannot exceed {}"                       ; Returns transaction message.                                                                        ;
        [total-allocations-balance])))                                          ;                                                                                                     ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun create-allocation:string                                                 ; "create-allocation" requires a KDA addess associated,                                               ;
  ( kda-account:string date:time guard:guard amount:decimal )                   ; a release date, a guard and an ammount to allocate.                                                 ;
@doc "Create an new allocation Account."                                        ; Public Documentation "Create an new allocation Account.".                                           ;
@model [ (property (valid-account account))                                     ; Ensures with a formal verification that the Account is in compliance.                               ;
         (property (manager-auth-required)) ]                                   ; Ensures with a formal verification that the transaction is sigend with manager's keyset.            ;
  (enforce (>= amount 0.0)                                                      ; Enforce the given amount to be greater than zero (0.0).                                             ;
    "Allocation amount must be non-negative")                                   ; returns error message if fails.                                                                     ;
  (enforce-unit amount)                                                         ; Ensures with "enforce-unit" functon that Amount is in compliance.                                   ;
  (with-capability (SHARES-MANAGER)                                             ; With Capability SHARES-MANAGER                                                                      ;
    (create-shares-account kda-account guard)                                   ; Create a Shares Account with given KDA Address and guard,                                           ;
    (let ((account (create-principal guard)))                                   ; let "account" be the Principal Account based on guard,                                              ;
    (validate-account account)                                                  ; ensure the Account is in compliance with internal function "validate-account",                      ;
    (write allocations account                                                  ; write in allocation table the account the following details                                         ;
      { "balance" : amount                                                      ; "balance" with given amount,                                                                        ;
      , "date" : date                                                           ; "date" with give release date,                                                                      ;
      , "guard" : guard                                                         ; "guard" with given guard and                                                                        ;
      , "redeemed" : false })                                                   ; "redeemed" as false, and                                                                            ;
      (validate-total-allocations)                                              ; ensures with "validate-total-allocations" the balance in Allocation Account is not exceed           ;
      (format "Allocation created! Account: {} Amount: {} Release: {}"          ; Returns transaction message.                                                                        ;
        [account amount date])))                                                ;                                                                                                     ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defun release-allocation ( account:string )                                    ; "release-allocation" requires an Account                                                            ;
@doc "Release funds associated with allocation Account into the main ledger."   ; Public Documentation "Release funds associated with allocation Account into the main ledger.".      ;
@model [ (property (valid-account account)) ]                                   ; Ensures with a formal verification that the Account is in compliance.                               ;
  (validate-account account)                                                    ; Ensure the Account is in compliance with internal function "validate-account".                      ;
  (with-read allocations account                                                ; Read from Allocations table the following Account details                                           ;
    { "balance" := balance                                                      ; "balance" as the balance allocated.                                                                 ;
    , "date" := release-time                                                    ; "release-time" as release date of allocation.                                                       ;
    , "redeemed" := redeemed                                                    ; "redeemed" as the indicator if allocation as been already released.                                 ;
    , "guard" := guard }                                                        ; "guard" as Guard that owns the allocation Account.                                                  ;
    (enforce (not redeemed)                                                     ; Enforce that the allocation has not been redeemed.                                                  ;
      "Allocation funds have already been redeemed")                            ; returns error message if fails.                                                                     ;
    (enforce                                                                    ; Enforce that                                                                                        ;
      (>= (now) release-time)                                                   ; current block time is greater than release date                                                     ;
      (format "funds locked until {}. Current time: {}"                         ; retunrs error message if fails.                                                                     ;
        [release-time (now)]))                                                  ;                                                                                                     ;
    (with-capability (SHARES-ALLOCATION)                                        ; With Capability SHARES-ALLOCATION                                                                   ;
      (install-capability (TRANSFER ALLOCATIONS_ACCOUNT account balance))       ; Install TRANSFER Capability for Allocation Account to give account with allocation balance and      ;
      (transfer ALLOCATIONS_ACCOUNT account balance))                           ; execute transfer function.                                                                          ;
    (update allocations account                                                 ; Update the Allocation table for given account                                                       ;
    { "redeemed" : true                                                         ; "redeemed" with true and                                                                            ;
    , "balance" : 0.0 })                                                        ; "balance" with zero (0.0).                                                                          ;
    "Allocation successfully released to main ledger")                          ; Returns transaction message.                                                                        ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; ========= GENESIS =========================================================== ; This section establishes the foundational parameters and capabilities                               ;
                                                                                ; required for the initial setup of the Shares Module.                                                ;
; =========== GENESIS CONSTANTS =============================================== ;                                                                                                     ;
                                                                                ;                                                                                                     ;
(defconst SHARES_ACCOUNT:string (create-principal                               ; Creates Shares Principal Account based on                                                           ;
    (create-capability-guard (SHARES-OWNERSHIP)))                               ; SHARES-OWNERSHIP Capability as SHARES_ACCOUNT                                                       ;
  "Self-managed Principal Shares Account.")                                     ; Public Documentation "Self-managed Principal Shares Account.".                                      ;
                                                                                ;                                                                                                     ;
(defconst SHARES_GENESIS_SUPPLY:decimal 1000000.0)                              ; Defines Shares Initial Supply as one million shares (1,000,000.0).                                  ;
                                                                                ;                                                                                                     ;
; =========== GENESIS SHARE DISTRIBUTION ====================================== ; Initial Shares Distribution                                                                         ;
                                                                                ;                                                                                                     ;
(defconst SHARES_IPO_GENESIS_SUPPLY:decimal 250000.0)                           ; Defines Initial Public Offering Shares Supply as Two Hundred Fifty Thousand shares (250,000.0).     ;
(defconst SHARES_FOUNDERS_SUPPLY:decimal 250000.0)                              ; Defines Founders Shares Supply as Two Hundred Fifty Thousand shares (250,000.0).                    ;
(defconst SHARES_TREASURY_SUPPLY:decimal 500000.0)                              ; Defines Treasury Shares Supply as Five Hundred Thousand shares (500,000.0).                         ;
                                                                                ;                                                                                                     ;
; =========== GENESIS CAPABILITIES ============================================ ; Genesis Capabilities Section.                                                                       ;
                                                                                ;                                                                                                     ;
(defcap SHARES-OWNERSHIP:bool ()                                                ; Defines Capability SHARES-OWNERSHIP and requires no imputs.                                         ;
@doc "Shares ownership managed capability."                                     ; Public Documentation "Shares ownership managed capability."                                         ;
  true                                                                          ; Where the Module is always entitle to this Capability.                                              ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
; =========== GENESIS FUNCTIONS =============================================== ; Genesus Functions Section.                                                                          ;
                                                                                ;                                                                                                     ;
(defun initialize:string ()                                                     ; "initialize" requires no imputs                                                                     ;
@doc "Initialize Smart Pacts Digital Shareholder Agreement."                    ; Public Documentation "Initialize Smart Pacts Digital Shareholder Agreement.".                       ;
@model [ (property (admin-auth-required)) ]                                     ; Ensures with a formal verification that the transaction is sigend with admin's keyset.              ;
  (with-capability (GOVERNANCE)                                                 ; With Capability GOVERNANCE                                                                          ;
    (coin.create-account SHARES_ACCOUNT                                         ; Create a Coin Account for Shares Account with a Guard as a                                          ;
      (create-capability-guard (SHARES-OWNERSHIP)))                             ; Capability Guard based on SHARES-OWNERSHIP Capability.                                              ;
    (create-shares-account SHARES_ACCOUNT                                       ; Create the Shares Account with a Guard as a                                                         ;
      (create-capability-guard (SHARES-OWNERSHIP)))                             ; Capability Guard based on SHARES-OWNERSHIP Capability.                                              ;
    (update ledger SHARES_ACCOUNT { "balance" : SHARES_GENESIS_SUPPLY })        ; Update Ledger table for Shares Account with initial Genesis Shares Supply.                          ;
    (coin.create-account ALLOCATIONS_ACCOUNT                                    ; Create a Coin Account for Allocation Account with a Guard as a                                      ;
      (create-capability-guard (SHARES-ALLOCATION)))                            ; Capability Guard based on SHARES-ALLOCATION Capability.                                             ;
    (create-shares-account ALLOCATIONS_ACCOUNT                                  ; Create the Allocation Account with a Guard as a                                                     ;
      (create-capability-guard (SHARES-ALLOCATION)))                            ; Capability Guard based on SHARES-ALLOCATION Capability.                                             ;
    (with-capability (SHARES-OWNERSHIP)                                         ; With Capability SHARES-OWNERSHIP                                                                    ;
      (install-capability                                                       ; Install Capability                                                                                  ;
        (TRANSFER SHARES_ACCOUNT ALLOCATIONS_ACCOUNT                            ; TRANSFER from Shares Account to Allocation Account                                                  ;
          (+ SHARES_IPO_GENESIS_SUPPLY SHARES_FOUNDERS_SUPPLY)))                ; the sum of Initial Public Offering Supply and Funders Supply and                                    ;
      (transfer SHARES_ACCOUNT ALLOCATIONS_ACCOUNT                              ; execute transfer function.                                                                          ;
        (+ SHARES_IPO_GENESIS_SUPPLY SHARES_FOUNDERS_SUPPLY))))                 ;                                                                                                     ;
)                                                                               ;                                                                                                     ;
                                                                                ;                                                                                                     ;
)                                                                               ;                                                                                                     ;
; ============================================================================= ; =================================================================================================== ;
;               End Of Digital Shareholder Agreement                            ;                                End Of Digital Shareholder Agreement                                 ;
; ============================================================================= ; =================================================================================================== ;
; ======= POST-DEPLOYMENT ===================================================== ; Post-Deployment Section. To initialize contract tables after deployment or Upgrade the contract.    ;
;                                                                               ;                                                                                                     ;
(if (read-msg "init")                                                           ; If deployment transaction contains "init" message, create the following table                       ;
  [ (create-table smartpacts.shares.ledger)                                     ; ledger table of "shares" Module in "smartpacts" namespace,                                          ;
    (create-table smartpacts.shares.allocations)                                ; allocations table of "shares" Module in "smartpacts" namespace,                                     ;
    (create-table smartpacts.shares.proposals)                                  ; proposals table of "shares" Module in "smartpacts" namespace and                                    ;
    (create-table smartpacts.shares.dividends) ]                                ; dividends table of "shares" Module in "smartpacts" namespace.                                       ;
  "Upgrade complete"                                                            ; If not initialize, returns Upgrade message.                                                         ;
)                                                                               ;                                                                                                     ;
; =================================================================================================================================================================================== ;